export declare function getCurStuctRemainingSize(curPos: number): number;
export interface TpmMarshaller {
    /**
     *  Convert this object to its TPM representation and store in the output byte buffer object
     *  @param buf Output byte buffer for the marshaled representation of this object
     *  @param startPos Current write position in the output buffer
     *  @returnsNew write position in the output buffer
     */
    toTpm(buf: Buffer, startPos: number): number;
    /**
     *  Populate this object from the TPM representation in the input byte buffer object
     *  @param buf  An input byte buffer containg marshaled representation of the object
     *  @param startPos  Current read position in the input buffer
     *  @returns Number of bytes unmarshaled
     */
    fromTpm(buf: Buffer, startPos: number): number;
}
export declare abstract class TpmStructure implements TpmMarshaller {
    /** TpmMarshaller method */
    abstract toTpm(buf: Buffer, pos: number): number;
    /** TpmMarshaller method */
    abstract fromTpm(buf: Buffer, pos: number): number;
    asTpm2B(): Buffer;
    asTpm(): Buffer;
    toTpm2B(buf: Buffer, pos: number): number;
}
/**
 *  Converts the given numerical value of the given size to the TPM wire format.
 *  @param val  Numerical value to marshal
 *  @param buf  Output buffer
 *  @param size  Size of the numerical value in bytes
 *  @param val  Current write position in the output buffer
 *  @returns New write posisition in the output buffer
 */
export declare function toTpm(val: number, buf: Buffer, size: number, pos: number): number;
/**
 *  Reads a numerical value of the given size from the input buffer containg data in the TPM wire format.
 *  @param buf  Input byte buffer
 *  @param size  Size of the numerical value in bytes
 *  @param val  Current read position in the output buffer
 *  @returns A pair containg the extracted numerical value and the new read posisition in the input buffer
 */
export declare function fromTpm(buf: Buffer, size: number, pos?: number): [number, number];
/**
 *  Writes the given byte array to the output buffer as a TPM2B structure in the TPM wire format.
 *  @param val  Byte array to marshal
 *  @param buf  Output byte buffer
 *  @param val  Current position in the output buffer
 *  @returns New posisition in the output buffer
 */
export declare function toTpm2B(val: Buffer, buf: Buffer, pos: number): number;
/**
 *  Reads a byte array from its a TPM2B structure representation in the TPM wire format.
 *  @param buf  Input buffer
 *  @param val  Current position in the output buffer
 *  @returns A pair containg the extracted byte buffer and new posisition in the input buffer
 */
export declare function fromTpm2B(buf: Buffer, pos?: number): [Buffer, number];
export declare function createFromTpm<T extends TpmMarshaller>(type: {
    new (): T;
}, buf: Buffer, pos: number): [T, number];
export declare function sizedToTpm<T extends TpmMarshaller>(obj: T, buf: Buffer, lenSize: number, pos: number): number;
export declare function sizedFromTpm<T extends TpmMarshaller>(type: {
    new (): T;
}, buf: Buffer, lenSize: number, pos: number): [T, number];
export declare function arrayToTpm<T extends TpmMarshaller>(arr: T[], buf: Buffer, lenSize: number, pos: number): number;
export declare function arrayFromTpm<T extends TpmMarshaller>(type: {
    new (): T;
}, buf: Buffer, lenSize: number, pos: number): [T[], number];
export declare function nonStandardToTpm(s: TpmMarshaller, buf: Buffer, pos: number): number;
export declare function nonStandardFromTpm(s: TpmMarshaller, buf: Buffer, pos: number): number;
