import { TPM_CC, TPM_RC, TPM_HANDLE } from "./TpmTypes.js";
import * as tss from "./Tss.js";
import { Tpm } from "./Tpm.js";
export declare class TpmBase {
    private Device;
    private LastResponseCode;
    private Sessions;
    /**
     *  Suppresses exceptions in response to the next command failure
     */
    private AllowErrors;
    private CmdTag;
    constructor(useSimulator?: boolean, host?: string, port?: number);
    connect(continuation: () => void): void;
    close(): void;
    private static isCommMediumError(code);
    private static cleanResponseCode(rawResponse);
    getLastResponseCode(): TPM_RC;
    /**
     * For the next TPM command invocation, errors will not cause an exception to be thrown
     * (use _lastCommandSucceeded or _getLastResponseCode() to check for an error)
     *
     * @return The same object (to allow modifier chaining)
     */
    allowErrors(): Tpm;
    /**
     * Specifies a single session handle to use with the next command
     *
     * @param hh List of up to 3 session handles
     * @return This TPM object
     */
    withSession(sess: tss.Session): Tpm;
    /**
     * Specifies the session handles to use with the next command
     *
     * @param hh List of up to 3 session handles
     * @return This TPM object
     */
    withSessions(...sess: tss.Session[]): Tpm;
    protected prepareCmdBuf(cmdCode: TPM_CC, handles: TPM_HANDLE[]): [Buffer, number];
    private ResponseHandler;
    private CmdBuf;
    private InterimResponseHandler(respBuf);
    protected dispatchCommand(cmdBuf: Buffer, responseHandler: (Buffer) => void): void;
    protected processResponse(cmdCode: TPM_CC, respBuf: Buffer): [number, number];
}
