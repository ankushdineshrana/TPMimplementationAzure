"use strict";
/*
 * The copyright in this software is being made available under the MIT License,
 *  included below. This software may be subject to other third party and
 *  contributor rights, including patent rights, and no such rights are granted
 *  under this license.
 *
 *  Copyright (c) Microsoft Corporation
 *
 *  All rights reserved.
 *
 *  The MIT License (MIT)
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var TpmTypes_js_1 = require("./TpmTypes.js");
exports.Owner = new TpmTypes_js_1.TPM_HANDLE(TpmTypes_js_1.TPM_RH.OWNER);
exports.Endorsement = new TpmTypes_js_1.TPM_HANDLE(TpmTypes_js_1.TPM_RH.ENDORSEMENT);
exports.NullSymDef = new TpmTypes_js_1.TPMT_SYM_DEF(TpmTypes_js_1.TPM_ALG_ID.NULL, 0, TpmTypes_js_1.TPM_ALG_ID.NULL);
//export const NullSymDefObj = new TPMT_SYM_DEF_OBJECT(TPM_ALG_ID.NULL, 0, TPM_ALG_ID.NULL);
var Session = (function () {
    function Session(sessionHandle, nonceTpm, sessionAttributes, nonceCaller) {
        if (sessionHandle === void 0) { sessionHandle = new TpmTypes_js_1.TPM_HANDLE(0); }
        if (nonceTpm === void 0) { nonceTpm = new Buffer(0); }
        if (sessionAttributes === void 0) { sessionAttributes = TpmTypes_js_1.TPMA_SESSION.continueSession; }
        if (nonceCaller === void 0) { nonceCaller = new Buffer(0); }
        this.SessIn = new TpmTypes_js_1.TPMS_AUTH_COMMAND();
        this.SessOut = new TpmTypes_js_1.TPMS_AUTH_RESPONSE();
        this.SessIn = new TpmTypes_js_1.TPMS_AUTH_COMMAND(sessionHandle, nonceCaller, sessionAttributes);
        this.SessOut = new TpmTypes_js_1.TPMS_AUTH_RESPONSE(nonceTpm, sessionAttributes);
    }
    Session.Pw = function (authValue) {
        var s = new Session();
        s.SessIn.sessionHandle = new TpmTypes_js_1.TPM_HANDLE(TpmTypes_js_1.TPM_RH.RS_PW);
        s.SessIn.nonce = new Buffer(0);
        s.SessIn.sessionAttributes = TpmTypes_js_1.TPMA_SESSION.continueSession;
        s.SessIn.hmac = authValue;
        s.SessOut.sessionAttributes = TpmTypes_js_1.TPMA_SESSION.continueSession;
        return s;
    };
    return Session;
}());
exports.Session = Session;
;
exports.NullPwSession = Session.Pw(new Buffer(0));
