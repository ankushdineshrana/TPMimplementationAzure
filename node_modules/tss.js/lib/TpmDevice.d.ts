export declare var ByteArray: any;
export declare enum TSS_TPM_INFO {
    TSS_TpmPlatformAvailable = 1,
    TSS_TpmUsesTbs = 2,
    TSS_TpmInRawMode = 4,
    TSS_TpmSupportsPP = 8,
    TSS_SocketConn = 4096,
    TSS_TbsConn = 8192,
}
export interface TpmDevice {
    connect(continuation: () => void): void;
    dispatchCommand(command: Buffer, continuation: (Buffer) => void): void;
    close(): void;
}
export declare class TpmLinuxDevice implements TpmDevice {
    private devTpmHandle;
    private static readonly InvalidHandle;
    private static fs;
    constructor(devTpmHandle?: number);
    connect(continuation: () => void): any;
    dispatchCommand(command: Buffer, continuation: (Buffer) => void): void;
    close(): void;
}
export declare class TpmTbsDevice implements TpmDevice {
    private tbsHandle;
    private tbsDll;
    constructor(tbsHandle?: number, tbsDll?: any);
    connect(continuation: () => void): any;
    dispatchCommand(command: Buffer, continuation: (Buffer) => void): void;
    close(): void;
}
export declare class TpmTcpDevice implements TpmDevice {
    tpmInfo: TSS_TPM_INFO;
    constructor(host?: string, port?: number);
    connect(continuation: () => void): void;
    dispatchCommand(command: Buffer, continuation: (Buffer) => void): void;
    close(): void;
    private tpmSocket;
    private host;
    private port;
    private tpmPlatSocket;
    private tcpResp;
    private connectCont;
    private dispatchCont;
    private onConnect();
    private onHandShake(lastRespFrag);
    private onPlatConnect(resp);
    private onPowerOnAck(resp);
    private onNvOnAck(resp);
    private onTpmStartup(resp);
    private onDispatch(lastRespFrag);
}
