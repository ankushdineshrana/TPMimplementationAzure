import { RegistrationClient, RegistrationResult } from './interfaces';
import { X509ProvisioningTransport, X509SecurityClient } from './interfaces';
/**
 * Client used to run the registration of a device using X509 authentication.
 */
export declare class X509Registration implements RegistrationClient {
    private _transport;
    private _securityClient;
    private _provisioningHost;
    private _idScope;
    private _pollingStateMachine;
    constructor(provisioningHost: string, idScope: string, transport: X509ProvisioningTransport, securityClient: X509SecurityClient);
    /**
     * Register the device with the provisioning service.
     *
     * @param registrationId The registration Id for the device
     * @param forceRegistration Set to true to force re-registration
     * @param callback function called when registration is complete.
     */
    register(callback: (err?: Error, result?: RegistrationResult) => void): void;
    /**
     * Cancels the current registration process.
     *
     * @param callback function called when the registration has already been canceled.
     */
    cancel(callback: (err?: Error) => void): void;
}
